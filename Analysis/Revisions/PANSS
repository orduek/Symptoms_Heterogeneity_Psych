---
title: PANSS - FULL POS AND NEG SCALE
subtitle: Version 0.1.0
author:
- <h5 style="font-style:italic"> Tobias R. Spiller
- <h5 style="font-style:italic"> Or Duek
date: <h5 style="font-style:roman"> `r format(Sys.time(), '%d %B, %Y')`
output:
  html_document:
    toc: yes
    toc_depth: 5
    toc_float: yes
---

```{r Setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = TRUE,
	warning = TRUE
)
```

```{r Load Libraries, message=FALSE, warning=TRUE, include=FALSE}
# Data handling
library(tidyverse)
library(readxl)

# Demographics
library(table1)
library(gtsummary)

# Additional
library(foreign)
library(ReIns)
library(psych)
library(poweRlaw)
```

## 1. Import and prepare data

```{r PANSS import data, message=FALSE, warning=TRUE, echo = FALSE}
# Import data
df <- read.csv('~/countSymptomsPTSD/pnass01.csv')


df$Age <- as.numeric(df$interview_age) / 10 # change age variable accordingly

panssDf <- df[,213:226]
panssDf$subjectkey <- df$subjectkey
panssDf$age <- df$Age
panssDf$sex <- df$sex

### Clean dataset
panss <- panssDf[!duplicated(panssDf$subjectkey),]

# clean NAs
data_subset <- panss[,1:14]
panss <- panss[complete.cases(data_subset),] # only 4616 valid cases

data0 <- panss
data0$sex <- as.factor(data0$sex)
```

First, we define how the PANSS items map onto the DSM-5 criteria.

```{r PANSS map, echo=TRUE, message=FALSE, warning=TRUE}
# Algorithm
data_SZ <- data0 %>%
  mutate(
    # Criterion 1: delusions
    criterion_1 = pos_p1 >= 2,
    
    # Criterion 2: hallucinations
    criterion_2 = pos_p3 >= 2,
    
    # Criterion 3: disorganized speech
    criterion_3 = pos_p2 >= 2,
    
    # Criterion 4: grossly disorganized or catatonic behavior
    criterion_4 = (gps_g5 >= 2) | (gps_g7 >= 2),
    
    # Criterion 5: negative symptoms
    criterion_5 = (neg_n1 >= 2) | (neg_n2 >= 2) | (neg_n3 >= 2) | 
                  (neg_n4 >= 2) | (neg_n5 >= 2) | (neg_n6 >= 2) | 
                  (neg_n7 >= 2),
  ) %>% 
  mutate(PANSS_total_sum = rowSums(select(., pos_p1:gps_g16)),
         PANSS_positive_sum = rowSums(select(., pos_p1:pos_p7)),
         PANSS_negative_sum = rowSums(select(., neg_n1:neg_n7)),
         PANSS_global_sum = rowSums(select(., gps_g1:gps_g16))
  )

```

Second, we define the diagnosis

```{r PANSS Dx, echo=TRUE, message=FALSE, warning=TRUE}
data_SZ <- data_SZ %>%
  mutate(
    # Defin Dx
    PANSS_Sz_DX = (
      # Condition 1: At least one of the criterion 1-3 is TRUE
      (criterion_1 | criterion_2 | criterion_3) &
      
      # Condition 2: At least two of the criterion 1-5 are TRUE
      (sum(criterion_1, criterion_2, criterion_3, criterion_4, criterion_5) >= 2)
    )
  )
```

Third, we compare demographics of individuals that meet and do not meet criteria.

```{r PANSS compare demographics, message=FALSE, warning=TRUE, echo = FALSE}    
# Add labels
# Set Theme
theme_gtsummary_journal(journal = "jama")
theme_gtsummary_compact()

# Table 1
data_SZ %>%
  select(
    # Demographics
    age, sex, PANSS_Sz_DX, SZ_Diagnosis, 
    PANSS_total_sum, PANSS_positive_sum, PANSS_negative_sum, PANSS_global_sum) %>%
  tbl_summary(
    by = SZ_Diagnosis,
    statistic = list(
      all_continuous() ~ "{mean} ({sd})")) %>% 
  modify_header(label ~ "**Variable**") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "Met SZ criteria, No. (%) of Patients") %>%
  bold_labels()
```
<br><br>
Fourth, we subset the population that meets the DSM-5 criteria. [not shown]

```{r PANSS subset, message=FALSE, warning=TRUE, echo = FALSE}  
# Subset
data_SZ_subset <- data_SZ %>% 
  filter(SZ_Diagnosis == TRUE)
```

```{r PANSS further analysis, message=FALSE, warning=TRUE, echo = FALSE}
# Prepare dataset for further analysis // DATA1
data1 <- data_SZ_subset %>%  select (pos_p1:neg_n7)

## Extract variable names
variable_names <- c(names(data1), "total")

## Rename variables to "Q1:QN" for binarization
colnames(data1) <- c(paste0("Q", 1:(ncol(data1))))

## Add total score
data1 <- data1 %>% 
  mutate(total = rowSums(data1[1:ncol(data1)]))
```

## 2. Sample Descriptive
```{r PANSS Table 1, echo=FALSE, message=FALSE}
# Table 1
data_SZ_subset %>%
  select(
    # Demographics
    age, sex, PANSS_Sz_DX, SZ_Diagnosis, 
    PANSS_total_sum, PANSS_positive_sum, PANSS_negative_sum, PANSS_global_sum) %>%
  tbl_summary(
    statistic = list(
      all_continuous() ~ "{mean} ({sd})")) %>% 
  modify_header(label ~ "**Variable**") %>%
  modify_caption("Table 1. Patient Characteristics") %>%
  bold_labels()
``` 

Cronbach's alpha
```{r PANSS cronbach, echo=FALSE, message=FALSE}
cronbach <- psych::alpha(subset(data1, select = (-total)))
cronbach$total
```

Summary of items & histogram
```{r PANSS summary, echo=FALSE, message=FALSE}
summary(data1)
hist(data1$total)
```

## 3. Binarizing & create datax 
Symptoms rated 3-7 will be considered as present.[not shown]
```{r PANSS Binarizing, echo=FALSE, message=FALSE, warning=FALSE}
## set cut-off
cut_off <- 2 #will be used with <= // 

## Binarize
data1_binarized <- data1
for (i in 1:(ncol(data1)-1)){
  orig <- paste("q", i, sep = "")
  bin <- paste("Q", i, sep = "")
  data1_binarized[orig] <- dplyr::case_when(data1_binarized[bin]<= cut_off ~ 0, data1_binarized[bin]>cut_off ~ 1)  #0 = "Symptom absent", 1 = "Symptom present"

}

# Create new data frame
data2 <- data1_binarized %>% 
  select(total:ncol(data1_binarized)) %>% 
  select(-total) %>% 
  tibble()


## Count frequency of profiles
data2_counted <- plyr::count(data2[, ]) 

# Create sum score of endorsed symptoms
data2_counted <- data2_counted %>% 
  mutate(total_bin = rowSums(data2_counted)-freq)


## Create datax 
# Create full dataset
datax <- dplyr::left_join(data1_binarized, data2_counted)


## Create dataframes for PsychPower Package 
data_SZ_subset_selected <- data_SZ_subset %>%  select (pos_p1:neg_n7)
data_binarized <- PsychPower::binarize(data_SZ_subset_selected, cut_off = 2)

data_frequency <- PsychPower::pheno_frequency(
  data_binarized, target_columns = tidyselect::starts_with("v_bin"))
```

```{r PANSS Save data I, echo=FALSE, message=FALSE}
# Save for further analysis
write_csv2(data1, "Analysis/SZ/Generated Data/binarized.csv")
write_csv2(data2_counted, "Analysis/SZ/Generated Data/Binarized_freq_count.csv")
write_csv2(datax, "Analysis/SZ/Generated Data/Binarized_Matched_freq_count.csv")
```

## 4. Description of Profiles
Severity
```{r PANSS Describe Severity, echo=FALSE, message=FALSE}
# Summed severity
summary(datax$total)
hist(datax$total)
```

Most common Phenotype
```{r PANSS Describe Number, echo=FALSE, message=FALSE}
desc_pheno <- PsychPower::describe_pheno(data_frequency, frequency = "freq") 
desc_pheno
```

10 Most common Phenotype
```{r PANSS Describe 10 most, echo=FALSE, message=FALSE}
PsychPower::common_pheno(data_frequency, frequency = "freq", n_phenotypes = 10)
```


Profiles reported less or equal to 5 time
```{r PANSS Describe 5 or less, echo=FALSE, message=FALSE}
data2_counted %>% filter(freq<=5) %>% nrow() # 
```

Profiles reported once
```{r PANSS Describe once, echo=FALSE, message=FALSE}
data2_counted %>% filter(freq==1) %>% nrow() # 
```
Profiles (N, %) reported by less or equal than in 1% of the individuals
```{r PANSS Having less then 1 percent, echo=FALSE, message=FALSE}
one_percent_sample = round(nrow(data1)*0.01, 0)
data2_counted %>% filter(freq<=one_percent_sample) %>% nrow()

round((data2_counted %>% filter(freq<=one_percent_sample) %>% nrow()) / nrow(data2_counted), 3)
```


individuals reporting one of the ten most common profiles
```{r PANSS Having 10 most, echo=FALSE, message=FALSE}
data2_counted <- data2_counted %>% 
  arrange(desc(freq))
data2_counted[1:10,] %>% summarise(sum(freq))
```

individuals reporting NOT one of the ten most common profiles
```{r PANSS  Not Having 10 most, echo=FALSE, message=FALSE}
data2_counted[11:nrow(data2_counted),] %>% summarise(sum(freq))
```

individuals reporting 1% Most common Profiles
```{r PANSS Describe 1 percent, echo=FALSE, message=FALSE}
one_percent =  round(nrow(data2_counted)*0.01, 0)

data2_counted[1:one_percent,] %>% summarise(sum(freq))
```

individuals reporting one of the 50% least common profiles
```{r PANSS Describe 50 percent, echo=FALSE, message=FALSE}
fifty_percent =  round(nrow(data2_counted)*0.5, 0)

data2_counted[fifty_percent:nrow(data2_counted),] %>% summarise(sum(freq))
```


Plot 100 most common profiles
```{r Plot 100 most common, echo=FALSE, message=FALSE}
fig1 <- PsychPower::plot_pheno(data_frequency, frequency = "freq",
                               n_phenotypes = 100, color = "grey26")
fig1

# save
pdf("Images/Top_100_Phenotypes_SZ.pdf", width=8, height=8)
fig1
dev.off() 

# FOR Combined figure
freq1_top  <- data2_counted %>% 
  top_n(freq, n = 100) %>% 
  select(freq)
```

## 5. Assess & compare distributions 
Test
```{r Test distributions, echo=FALSE, message=FALSE}
freq_distribution <- PsychPower::pheno_distributions(data_frequency, frequency = "freq")

set.seed(241)

desc_freq <- PsychPower::describe_pheno_distr(freq_distribution, bootStrap = T,
                                  nBoots = 5, nCores = 5)
round(desc_freq, 3)
```

Compare distributions

```{r Compare distributions, echo=FALSE, message=FALSE}
comp_fit_freq <- PsychPower::compare_pheno_distr(freq_distribution)

comp_fit_freq
```

## 6. Save & export data for Figures [not shown]
```{r Save & export, message=FALSE, include=FALSE}
#Export data for Figures 
### Figure 1a
freq1_top_SZ <- freq1_top 
save(freq1_top_SZ , file = "Analysis/SZ/Generated Data/freq1_top_SZ.RData")

### Figure 1b
# Export m_pl & m_ln
res_pl_SZ <- plot(freq_distribution[[1]])
line_pl_SZ <- lines(freq_distribution[[1]])
line_ln_SZ <- lines(freq_distribution[[2]])
line_ex_SZ <- lines(freq_distribution[[3]])

save(res_pl_SZ, file = "Analysis/SZ/Generated Data/res_pl_SZ.RData")
save(line_pl_SZ, file = "Analysis/SZ/Generated Data/line_pl_SZ.RData")
save(line_ln_SZ, file = "Analysis/SZ/Generated Data/line_ln_SZ.RData")
save(line_ex_SZ, file = "Analysis/SZ/Generated Data/line_ex_SZ.RData")
```

## 7. Session Info
```{r Session Info, echo=FALSE, message=FALSE}
sessionInfo()
```
